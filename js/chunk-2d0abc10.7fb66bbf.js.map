{"version":3,"sources":["webpack:///./node_modules/@capacitor/network/dist/esm/web.js"],"names":["translatedConnection","connection","window","navigator","mozConnection","webkitConnection","result","type","effectiveType","NetworkWeb","super","this","handleOnline","connectionType","status","connected","notifyListeners","handleOffline","addEventListener","unavailable","onLine","Network"],"mappings":"kHAAA,0GACA,SAASA,IACL,MAAMC,EAAaC,OAAOC,UAAUF,YAChCC,OAAOC,UAAUC,eACjBF,OAAOC,UAAUE,iBACrB,IAAIC,EAAS,UACb,MAAMC,EAAON,EAAaA,EAAWM,MAAQN,EAAWO,cAAgB,KACxE,GAAID,GAAwB,kBAATA,EACf,OAAQA,GAEJ,IAAK,YACL,IAAK,WACDD,EAAS,WACT,MACJ,IAAK,OACDA,EAAS,OACT,MACJ,IAAK,WACL,IAAK,OACL,IAAK,QACDA,EAAS,OACT,MACJ,IAAK,QACL,IAAK,UACDA,EAAS,UACT,MAEJ,IAAK,UACL,IAAK,KACL,IAAK,KACDA,EAAS,WACT,MACJ,IAAK,KACDA,EAAS,OACT,MACJ,QACI,MAGZ,OAAOA,EAEJ,MAAMG,UAAmB,OAC5B,cACIC,QACAC,KAAKC,aAAe,KAChB,MAAMC,EAAiBb,IACjBc,EAAS,CACXC,WAAW,EACXF,eAAgBA,GAEpBF,KAAKK,gBAAgB,sBAAuBF,IAEhDH,KAAKM,cAAgB,KACjB,MAAMH,EAAS,CACXC,WAAW,EACXF,eAAgB,QAEpBF,KAAKK,gBAAgB,sBAAuBF,IAE1B,qBAAXZ,SACPA,OAAOgB,iBAAiB,SAAUP,KAAKC,cACvCV,OAAOgB,iBAAiB,UAAWP,KAAKM,gBAGhD,kBACI,IAAKf,OAAOC,UACR,MAAMQ,KAAKQ,YAAY,wDAE3B,MAAMJ,EAAYb,OAAOC,UAAUiB,OAC7BP,EAAiBb,IACjBc,EAAS,CACXC,YACAF,eAAgBE,EAAYF,EAAiB,QAEjD,OAAOC,GAGf,MAAMO,EAAU,IAAIZ","file":"js/chunk-2d0abc10.7fb66bbf.js","sourcesContent":["import { WebPlugin } from '@capacitor/core';\nfunction translatedConnection() {\n    const connection = window.navigator.connection ||\n        window.navigator.mozConnection ||\n        window.navigator.webkitConnection;\n    let result = 'unknown';\n    const type = connection ? connection.type || connection.effectiveType : null;\n    if (type && typeof type === 'string') {\n        switch (type) {\n            // possible type values\n            case 'bluetooth':\n            case 'cellular':\n                result = 'cellular';\n                break;\n            case 'none':\n                result = 'none';\n                break;\n            case 'ethernet':\n            case 'wifi':\n            case 'wimax':\n                result = 'wifi';\n                break;\n            case 'other':\n            case 'unknown':\n                result = 'unknown';\n                break;\n            // possible effectiveType values\n            case 'slow-2g':\n            case '2g':\n            case '3g':\n                result = 'cellular';\n                break;\n            case '4g':\n                result = 'wifi';\n                break;\n            default:\n                break;\n        }\n    }\n    return result;\n}\nexport class NetworkWeb extends WebPlugin {\n    constructor() {\n        super();\n        this.handleOnline = () => {\n            const connectionType = translatedConnection();\n            const status = {\n                connected: true,\n                connectionType: connectionType,\n            };\n            this.notifyListeners('networkStatusChange', status);\n        };\n        this.handleOffline = () => {\n            const status = {\n                connected: false,\n                connectionType: 'none',\n            };\n            this.notifyListeners('networkStatusChange', status);\n        };\n        if (typeof window !== 'undefined') {\n            window.addEventListener('online', this.handleOnline);\n            window.addEventListener('offline', this.handleOffline);\n        }\n    }\n    async getStatus() {\n        if (!window.navigator) {\n            throw this.unavailable('Browser does not support the Network Information API');\n        }\n        const connected = window.navigator.onLine;\n        const connectionType = translatedConnection();\n        const status = {\n            connected,\n            connectionType: connected ? connectionType : 'none',\n        };\n        return status;\n    }\n}\nconst Network = new NetworkWeb();\nexport { Network };\n//# sourceMappingURL=web.js.map"],"sourceRoot":""}